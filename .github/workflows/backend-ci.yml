# implementing CI/CD pipeline for backend
name: Backend CI/CD

on:
  push:
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: DB
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        networks:
          db-network:
            ipv4_address: 172.20.0.10 
        # Needed to keep the container running until tests are done
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: docker.io/bitnami/minio:2022
        ports:
          - '9000:9000'
          - '9001:9001'
        networks:
          db-network:
            ipv4_address: 172.20.0.50 
        volumes:
          - 'minio_data:/data'
        environment:
          - MINIO_ROOT_USER=minioConnect
          - MINIO_ROOT_PASSWORD=connectMinio
          - MINIO_DEFAULT_BUCKETS=videos
          - MINIO_ACCESS_KEY=minioConnect
          - MINIO_SECRET_KEY=connectMinio
      

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    - name: Install dependencies
      working-directory: ./backend
      run: |
        sudo apt update
        sudo apt install -y python3 python3-pip libsm6 libxext6 python3-opencv
        sudo apt-get install -y --no-install-recommends ffmpeg
        pip install -r requirements.txt

    - name: Lint with Ruff
      working-directory: ./backend
      run: |
        pip install ruff
        ruff check .
      continue-on-error: true
    - name: Test with pytest
      working-directory: ./backend
      run: |
        pytest
    - name: Testing database
      working-directory: ./backend/app
      run: |
        python3 db_tests.py
    # Add deployment steps


networks:
  postgres-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.0.20.0/24