services:
  webserver:
    image: apache/airflow:2.1.0
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=_VbJMFmQmpoQzoPwm0Wdeeckto5eglcPTIOU2AcHRnA=
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    command: webserver
  scheduler:
    image: apache/airflow:2.1.0
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=_VbJMFmQmpoQzoPwm0Wdeeckto5eglcPTIOU2AcHRnA=
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    command: scheduler
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
  rabbitmq:
    image: 'rabbitmq:3-management'
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - backnet
      - frontnet
  
  redis:
    image: redis:latest
    hostname: redis
    networks:
      - backnet
      - frontnet


  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:5000"
    volumes:
      - ./backend:/app
    networks:
      - backnet
      - frontnet 

  # db:
  #   image: postgres
  #   restart: unless-stopped
  #   container_name: db
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=DB
  #   ports:
  #     - '5432:5432'
  #   networks:
  #     db-network:
  #       ipv4_address: 172.20.0.10 
  #   volumes:
  #     - db_data:/var/lib/postgresql/data
  #     - ./database/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
  #     - ./database/postgresql.conf:/etc/postgresql/postgresql.conf  # Mount the custom configuration file
  #   command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  # database-setup:
  #   build:
  #     context: ./database/
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./database/setup.py:/app/setup.py
  #   depends_on:
  #     - db
  #   networks:
  #     - db-network

  worker:
    build:
      context: ./backend
      dockerfile: ./scripts/Dockerfile
    volumes:
      - ./backend:/app
    links:
      - rabbitmq
      - redis
    environment:
        - CELERY_BROKER=pyamqp://rabbitmq:5672//
    networks:
      - backnet
  # frontend:
  #   build: 
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - frontnet

# volumes:
#   db_data:

networks:
  backnet:
    driver: bridge
  frontnet:
     driver: bridge
  # db-network:
  #   driver: bridge
  #   ipam:
  #     config:
  #       - subnet: 172.20.0.0/24


